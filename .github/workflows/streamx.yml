name: StreamX CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

jobs:
  build-and-test:
    name: üèóÔ∏è Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Run Tests
        run: npm test
        env:
          CI: true
      
      - name: Run Linting
        run: npm run lint
      
      - name: Check Types
        run: npm run type-check
      
      - name: Build
        run: npm run build

  deploy:
    name: üöÄ Deploy
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Deploy to Cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy

  backup:
    name: üíæ Backup
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: Create Backup Directory
        run: mkdir -p backups
      
      - name: Backup Database
        run: wrangler d1 backup streamx-db backups/db-$(date +%Y%m%d).sql
      
      - name: Upload to R2
        run: wrangler r2 object put streamx-storage/backups/db-$(date +%Y%m%d).sql --file backups/db-$(date +%Y%m%d).sql
      
      - name: Save Backup as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-$(date +%Y%m%d)
          path: backups/
          retention-days: 30

  notify:
    name: üì¢ Notify
    needs: [build-and-test, deploy, backup]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check Status
        if: contains(needs.*.result, 'failure')
        run: exit 1
      
      - name: Send Notification
        if: failure()
        run: |
          echo "Workflow failed!"
          # Add your notification logic here (e.g., Discord, Slack, or email) 